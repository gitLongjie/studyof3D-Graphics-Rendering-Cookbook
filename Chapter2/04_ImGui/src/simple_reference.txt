#include <glad/gl.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/ext.hpp>

#include <stdlib.h>
#include <stdio.h>

using glm::mat4;
using glm::vec3;

static const struct
{
    float x, y;
    float r, g, b;
} vertices[3] =
{
    { -0.6f, -0.4f, 1.f, 0.f, 0.f },
    {  0.6f, -0.4f, 0.f, 1.f, 0.f },
    {   0.f,  0.6f, 0.f, 0.f, 1.f }
};

static const char* vertex_shader_text = R"(
#version 460 core
layout(std140, binding = 0) uniform PerFrameData
{
	uniform mat4 MVP;
};
layout (location=0) in vec2 vPos;
layout (location=1) in vec3 vCol;
layout (location=0) out vec3 color;
void main()
{
    gl_Position = MVP * vec4(vPos, 0.0, 1.0);
    color = vCol;
}
)";

static const char* fragment_shader_text = R"(
#version 460 core
layout (location=0) in vec3 color;
layout (location=0) out vec4 out_FragColor;
void main()
{
    out_FragColor = vec4(color, 1.0);
};
)";

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}

static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

bool checkStatus( GLuint id )
{
	GLint   SuccessFlag = 0;
	GLsizei Length = 0;
	GLsizei MaxLength = 0;

	//
	if ( glIsProgram( id ) )
	{
		glGetProgramiv( id, GL_LINK_STATUS, &SuccessFlag );
		glGetProgramiv( id, GL_INFO_LOG_LENGTH, &MaxLength );

		if ( MaxLength )
		{
			char* Log = (char*)alloca( MaxLength );

			glGetProgramInfoLog( id, MaxLength, &Length, Log );

			if ( Length ) printf( "Program info:\n%s", Log );
		}
	}
	else if ( glIsShader( id ) )
	{
		glGetShaderiv( id, GL_COMPILE_STATUS, &SuccessFlag );
		glGetShaderiv( id, GL_INFO_LOG_LENGTH, &MaxLength );

		if ( MaxLength )
		{
			char* Log = (char*)alloca( MaxLength );

			glGetShaderInfoLog( id, MaxLength, &Length, Log );

			if ( Length ) printf( "Shader info:\n%s", Log );
		}
	}
	else
	{
		printf( "Unknown object type" );
	}

	if ( SuccessFlag == 0 )
	{
		return false;
	}

	return true;
}

int main(void)
{
    GLFWwindow* window;
    GLuint vertex_buffer, vertex_shader, fragment_shader, program;
    GLint mvp_location, vpos_location, vcol_location;

    glfwSetErrorCallback(error_callback);

    if (!glfwInit())
        exit(EXIT_FAILURE);

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
	glfwWindowHint( GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE );

    window = glfwCreateWindow(1024, 768, "Simple example", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    glfwSetKeyCallback(window, key_callback);

    glfwMakeContextCurrent(window);
    gladLoadGL(glfwGetProcAddress);
    glfwSwapInterval(1);

    // NOTE: OpenGL error checks have been omitted for brevity

    glGenBuffers(1, &vertex_buffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    vertex_shader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertex_shader, 1, &vertex_shader_text, NULL);
    glCompileShader(vertex_shader);
	checkStatus( vertex_shader, GL_VERTEX_SHADER, "" );

    fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragment_shader, 1, &fragment_shader_text, NULL);
    glCompileShader(fragment_shader);
	checkStatus( fragment_shader, GL_VERTEX_SHADER, "" );

    program = glCreateProgram();
    glAttachShader(program, vertex_shader);
    glAttachShader(program, fragment_shader);
    glLinkProgram(program);
	checkStatus( program, GL_VERTEX_SHADER, "" );

    mvp_location = glGetUniformLocation(program, "MVP");
    vpos_location = 0;
    vcol_location = 1;

	GLuint VAO;
	glCreateVertexArrays( 1, &VAO );
	glBindVertexArray( VAO );

    glEnableVertexAttribArray(vpos_location);
    glVertexAttribPointer(vpos_location, 2, GL_FLOAT, GL_FALSE,
                          sizeof(vertices[0]), (void*) 0);
    glEnableVertexAttribArray(vcol_location);
    glVertexAttribPointer(vcol_location, 3, GL_FLOAT, GL_FALSE,
                          sizeof(vertices[0]), (void*) (sizeof(float) * 2));

	GLuint perFrameDataBuffer;
	glCreateBuffers( 1, &perFrameDataBuffer );
	glNamedBufferStorage( perFrameDataBuffer, sizeof(mat4), nullptr, GL_DYNAMIC_STORAGE_BIT );
	glBindBuffer( GL_UNIFORM_BUFFER, perFrameDataBuffer );
	glBindBufferBase( GL_UNIFORM_BUFFER, 0, perFrameDataBuffer );

    while (!glfwWindowShouldClose(window))
    {
        float ratio;
        int width, height;
        mat4 m, p, mvp;

        glfwGetFramebufferSize(window, &width, &height);
        ratio = width / (float) height;

        glViewport(0, 0, width, height);
        glClear(GL_COLOR_BUFFER_BIT);

        m = glm::rotate( mat4(1.0f), (float) glfwGetTime(), vec3(0.0f, 0.0f, 1.0f));
		p = glm::ortho(-ratio, ratio, -1.f, 1.f, 1.f, -1.f);
		mvp = p * m;

        glUseProgram(program);
		//glUniformMatrix4fv( mvp_location, 1, GL_FALSE, glm::value_ptr( mvp ) );
		glNamedBufferSubData( perFrameDataBuffer, 0, sizeof(mat4), glm::value_ptr( mvp ) );
        glDrawArrays(GL_TRIANGLES, 0, 3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);

    glfwTerminate();
    exit(EXIT_SUCCESS);
}
